/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coffeeshop;

import java.awt.Color;
import java.sql.ResultSet;
import java.sql.DatabaseMetaData;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSetMetaData;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JackyWuuu
 */
public class ShopMainFrame extends javax.swing.JFrame {
    
    // DB credentials
    private final String dbURL  = "jdbc:derby://localhost:1527/dbCoffeeStoreData";
    private final String user   = "root";
    private final String pass   = "passsword";

    /**
     * Creates new form ShopMainFrame
     */
    public ShopMainFrame() {
        initComponents();
        this.setTitle("Jack's Coffee Shop");
        displayCoffeeButton.setBackground(Color.decode("#dddddd"));
        displayCoffeeButton.setForeground(Color.decode("#3a2215"));
        displayCustomerButton.setBackground(Color.decode("#dddddd"));
        displayCustomerButton.setForeground(Color.decode("#3a2215"));
        displayOrderButton.setBackground(Color.decode("#dddddd"));
        displayOrderButton.setForeground(Color.decode("#3a2215"));
        newCustomerButton.setBackground(Color.decode("#dddddd"));
        newCustomerButton.setForeground(Color.decode("#3a2215"));    
        newOrderButton.setBackground(Color.decode("#dddddd"));
        newOrderButton.setForeground(Color.decode("#3a2215"));
        createDatabaseButton.setBackground(Color.decode("#dddddd"));
        createDatabaseButton.setForeground(Color.decode("#3a2215"));
        resetDatabaseButton.setForeground(Color.decode("#3a2215"));
        resetDatabaseButton.setBackground(Color.decode("#dddddd"));
        addOrderButton.setForeground(Color.decode("#3a2215"));
        addOrderButton.setBackground(Color.decode("#dddddd"));
        addCustomerButton.setForeground(Color.decode("#3a2215"));
        addCustomerButton.setBackground(Color.decode("#dddddd"));
        dropDatabaseButton.setForeground(Color.decode("#3a2215"));
        dropDatabaseButton.setBackground(Color.decode("#dddddd"));
        newCustomerPane.setVisible(false);
        newOrderPane.setVisible(false);
        displayTable.getTableHeader().setReorderingAllowed(false);
        displayTable.getTableHeader().setResizingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        subFrame = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        displayCoffeeButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        displayCustomerButton = new javax.swing.JButton();
        displayOrderButton = new javax.swing.JButton();
        newCustomerButton = new javax.swing.JButton();
        newOrderButton = new javax.swing.JButton();
        createDatabaseButton = new javax.swing.JButton();
        resetDatabaseButton = new javax.swing.JButton();
        dropDatabaseButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        newOrderPane = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        customerIDTextBox = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        coffeeIDTextBox = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        numOrderedTextBox = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        addOrderButton = new javax.swing.JButton();
        newCustomerPane = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        firstNameTextBox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lastNameTextBox = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        streetTextBox = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cityTextBox = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        stateTextBox = new javax.swing.JTextField();
        emailTextBox = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        phoneTextBox = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        zipTextBox = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        addCustomerButton = new javax.swing.JButton();

        subFrame.setResizable(false);
        subFrame.setSize(new java.awt.Dimension(1000, 500));

        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
            }
        ));
        jScrollPane2.setViewportView(displayTable);

        javax.swing.GroupLayout subFrameLayout = new javax.swing.GroupLayout(subFrame.getContentPane());
        subFrame.getContentPane().setLayout(subFrameLayout);
        subFrameLayout.setHorizontalGroup(
            subFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subFrameLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 935, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        subFrameLayout.setVerticalGroup(
            subFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subFrameLayout.createSequentialGroup()
                .addContainerGap(99, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 500));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 0, -1, 503));

        jLabel1.setFont(new java.awt.Font("Curlz MT", 0, 36)); // NOI18N
        jLabel1.setText("Jack's Coffee Shop");
        jLabel1.setFocusable(false);
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 194, -1, 45));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coffeeshop/Images/JackCoffeeShopNOBG.png"))); // NOI18N
        jLabel2.setFocusable(false);
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 56, -1, 132));

        jScrollPane1.setBorder(null);
        jScrollPane1.setFocusable(false);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("                  ══════════ ◈ ══════════\n           Welcome to Jack's Coffee Shop.\n            Family-owned, proudly serving\n    handcrafted, freshly ground coffee since\n      1997. Join us for a warm welcome and\n       experience the rich flavors that have \n    made us a beloved  lcoal favorite TODAY!\n                  ══════════ ◈ ══════════");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(null);
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);
        jTextArea1.getAccessibleContext().setAccessibleName("");
        jTextArea1.getAccessibleContext().setAccessibleDescription("");
        jTextArea1.setBackground(Color.decode("#EEEEEE"));
        //jTextArea1.setAlignmentX(Component.CENTER_ALIGNMENT);
        //jTextArea1.setAlignmentY(Component.CENTER_ALIGNMENT);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 245, 249, 181));

        displayCoffeeButton.setText("Display Coffees");
        displayCoffeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayCoffeeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(displayCoffeeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, 128, 35));
        displayCoffeeButton.getAccessibleContext().setAccessibleName("DisplayCoffeeButton");
        displayCoffeeButton.setBackground(Color.decode("#5f6263"));

        jSeparator2.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(433, 0, -1, 503));

        displayCustomerButton.setText("Display Customers");
        displayCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayCustomerButtonActionPerformed(evt);
            }
        });
        getContentPane().add(displayCustomerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 80, 130, 35));

        displayOrderButton.setText("Display Orders");
        displayOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayOrderButtonActionPerformed(evt);
            }
        });
        getContentPane().add(displayOrderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 128, 35));

        newCustomerButton.setText("New Customer");
        newCustomerButton.setToolTipText("");
        newCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCustomerButtonActionPerformed(evt);
            }
        });
        getContentPane().add(newCustomerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 190, 128, 35));

        newOrderButton.setText("New Order");
        newOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newOrderButtonActionPerformed(evt);
            }
        });
        getContentPane().add(newOrderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 240, 128, 35));

        createDatabaseButton.setText("Create Database");
        createDatabaseButton.setToolTipText("");
        createDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDatabaseButtonActionPerformed(evt);
            }
        });
        getContentPane().add(createDatabaseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 300, 128, 35));

        resetDatabaseButton.setText("Reset Database");
        resetDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDatabaseButtonActionPerformed(evt);
            }
        });
        getContentPane().add(resetDatabaseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 400, 128, 35));

        dropDatabaseButton.setText("Drop Database");
        dropDatabaseButton.setToolTipText("");
        dropDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropDatabaseButtonActionPerformed(evt);
            }
        });
        getContentPane().add(dropDatabaseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 350, 128, 35));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Customer ID");

        customerIDTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Coffee ID");

        coffeeIDTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel14.setText("Num Ordered");

        numOrderedTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel20.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel20.setText("  Add New Order");

        addOrderButton.setText("Add Order");
        addOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newOrderPaneLayout = new javax.swing.GroupLayout(newOrderPane);
        newOrderPane.setLayout(newOrderPaneLayout);
        newOrderPaneLayout.setHorizontalGroup(
            newOrderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newOrderPaneLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel20))
            .addGroup(newOrderPaneLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(newOrderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(newOrderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel14)
                        .addComponent(jLabel13)))
                .addGap(11, 11, 11)
                .addGroup(newOrderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addOrderButton)
                    .addGroup(newOrderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(numOrderedTextBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                        .addComponent(coffeeIDTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(customerIDTextBox, javax.swing.GroupLayout.Alignment.LEADING))))
        );
        newOrderPaneLayout.setVerticalGroup(
            newOrderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newOrderPaneLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel20)
                .addGap(33, 33, 33)
                .addGroup(newOrderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerIDTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newOrderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coffeeIDTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newOrderPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numOrderedTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(175, 175, 175)
                .addComponent(addOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("First Name");

        firstNameTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Last Name");

        lastNameTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Street");

        streetTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("City");

        cityTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cityTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityTextBoxActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("State");

        stateTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        stateTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateTextBoxActionPerformed(evt);
            }
        });

        emailTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("E-mail");

        phoneTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Phone");

        zipTextBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Zip Code");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel12.setText("Add New Customer");

        addCustomerButton.setText("Add Customer");
        addCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newCustomerPaneLayout = new javax.swing.GroupLayout(newCustomerPane);
        newCustomerPane.setLayout(newCustomerPaneLayout);
        newCustomerPaneLayout.setHorizontalGroup(
            newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newCustomerPaneLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel12))
            .addGroup(newCustomerPaneLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5)
                        .addComponent(jLabel4)
                        .addComponent(jLabel6)
                        .addComponent(jLabel7)
                        .addComponent(jLabel11)
                        .addComponent(jLabel10)
                        .addComponent(jLabel9)))
                .addGap(11, 11, 11)
                .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addCustomerButton)
                    .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(phoneTextBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                            .addComponent(zipTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stateTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cityTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(streetTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastNameTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstNameTextBox, javax.swing.GroupLayout.Alignment.LEADING))
                        .addComponent(emailTextBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        newCustomerPaneLayout.setVerticalGroup(
            newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newCustomerPaneLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel12)
                .addGap(33, 33, 33)
                .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(streetTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zipTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(newCustomerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addComponent(addCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(newCustomerPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 319, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(newOrderPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 300, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newCustomerPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addComponent(newOrderPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(12, 12, 12)))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(448, 6, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void displayOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayOrderButtonActionPerformed
        try (Connection conn = DriverManager.getConnection(dbURL, user, pass)) {
            clearTable();
            subFrame.setTitle("Orders");
            subFrame.setVisible(true);
            String createTableSQL = "SELECT * FROM ORDERS";
            PreparedStatement statement = conn.prepareStatement(createTableSQL);
            ResultSet resultSet = statement.executeQuery();
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();
            DefaultTableModel tableModel = new DefaultTableModel();

            for (int i = 1; i <= columnCount; i++) {
                tableModel.addColumn(metaData.getColumnName(i));
            }

            while (resultSet.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    row[i] = resultSet.getObject(i + 1);
                }
                tableModel.addRow(row);
            }

            displayTable.setModel(tableModel);

            statement.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error showing customer table: " + ex.getMessage());
        }
    }//GEN-LAST:event_displayOrderButtonActionPerformed

    private void displayCoffeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayCoffeeButtonActionPerformed
        try (Connection conn = DriverManager.getConnection(dbURL, user, pass)) {
            clearTable();
            subFrame.setTitle("Coffee");
            subFrame.setVisible(true);
            String createTableSQL = "SELECT * FROM COFFEE";
            PreparedStatement statement = conn.prepareStatement(createTableSQL);
            ResultSet resultSet = statement.executeQuery();
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();
            DefaultTableModel tableModel = new DefaultTableModel();

            for (int i = 1; i <= columnCount; i++) {
                tableModel.addColumn(metaData.getColumnName(i));
            }

            while (resultSet.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    row[i] = resultSet.getObject(i + 1);
                }
                tableModel.addRow(row);
            }

            displayTable.setModel(tableModel);

            statement.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error showing customer table: " + ex.getMessage());
        }
    }//GEN-LAST:event_displayCoffeeButtonActionPerformed

    public void clearTable() {
        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
            }
        ));
    }
    
    private void createDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDatabaseButtonActionPerformed
        // TODO add your handling code here:
        try(Connection conn = DriverManager.getConnection(dbURL, user, pass)) {
            if (tableExists(conn, "Customer")) {
                JOptionPane.showMessageDialog(this, "Failed to create Customer table because it already exist in database");
                return;
            }
            if (tableExists(conn, "Coffee")) {
                JOptionPane.showMessageDialog(this, "Failed to create Coffee table because it already exist in database");
                return;
            }
            if (tableExists(conn, "Orders")) {
                JOptionPane.showMessageDialog(this, "Failed to create Orders table because it already exist in database");
                return;
            }
            
            createTables(conn);
            
            JOptionPane.showMessageDialog(this, "Tables created successfully!");
            
            conn.close();
            
            populateTables();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error creating tables: " + ex.getMessage());
        }
        
    }//GEN-LAST:event_createDatabaseButtonActionPerformed

    private void resetDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetDatabaseButtonActionPerformed
        try(Connection conn = DriverManager.getConnection(dbURL, user, pass)) {
            if (tableExists(conn, "Orders")) {
                dropTable(conn, "Orders");
            }
            if (tableExists(conn, "Customer")) {
                dropTable(conn, "Customer");
            }
            if (tableExists(conn, "Coffee")) {
                dropTable(conn, "Coffee");
            }
            createTables(conn);
            populateTables();
            JOptionPane.showMessageDialog(this, "Tables reset successfully!");
            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error resetting tables: " + ex.getMessage());
        }
    }//GEN-LAST:event_resetDatabaseButtonActionPerformed

    private void dropDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropDatabaseButtonActionPerformed
        try(Connection conn = DriverManager.getConnection(dbURL, user, pass)) {
            
            if (!tableExists(conn, "Customer")) {
                JOptionPane.showMessageDialog(this, "Failed to drop Customer table because it doesn't exist in database");
                return;
            }
            if (!tableExists(conn, "Coffee")) {
                JOptionPane.showMessageDialog(this, "Failed to drop Coffee table because it doesn't exist in database");
                return;
            }
            if (!tableExists(conn, "Orders")) {
                JOptionPane.showMessageDialog(this, "Failed to drop Orders table because it doesn't exist in database");
                return;
            }
            
            dropTable(conn, "Orders");
            dropTable(conn, "Customer");
            dropTable(conn, "Coffee");
            
            JOptionPane.showMessageDialog(this, "All tables dropped successfully!");
            
            conn.close();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error dropping tables: " + ex.getMessage());
        }
    }//GEN-LAST:event_dropDatabaseButtonActionPerformed

    private void displayCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayCustomerButtonActionPerformed
        try (Connection conn = DriverManager.getConnection(dbURL, user, pass)) {
            clearTable();
            subFrame.setTitle("Customers");
            subFrame.setVisible(true);
            String createTableSQL = "SELECT * FROM CUSTOMER";
            PreparedStatement statement = conn.prepareStatement(createTableSQL);
            ResultSet resultSet = statement.executeQuery();
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();

            DefaultTableModel tableModel = new DefaultTableModel();

            for (int i = 1; i <= columnCount; i++) {
                tableModel.addColumn(metaData.getColumnName(i));
            }

            while (resultSet.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    row[i] = resultSet.getObject(i + 1);
                }
                tableModel.addRow(row);
            }

            displayTable.setModel(tableModel);

            statement.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error showing customer table: " + ex.getMessage());
        }
    }//GEN-LAST:event_displayCustomerButtonActionPerformed

    private void newCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCustomerButtonActionPerformed
        if (newCustomerPane.isVisible() == true) {
            newCustomerPane.setVisible(false);
            System.out.println(newCustomerPane.getLocation());
        } else {
            newOrderPane.setVisible(false);
            newCustomerPane.setVisible(true);
            System.out.println(newCustomerPane.getLocation());
        }
    }//GEN-LAST:event_newCustomerButtonActionPerformed

    private void stateTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stateTextBoxActionPerformed

    private void cityTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityTextBoxActionPerformed

    private void newOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newOrderButtonActionPerformed
        newOrderPane.setLocation(0, 12);
        if (newOrderPane.isVisible() == true) {
            newOrderPane.setVisible(false);
            System.out.println(newOrderPane.getLocation());
        } else {
            newCustomerPane.setVisible(false);
            newOrderPane.setVisible(true);
            System.out.println(newOrderPane.getLocation());
        }
    }//GEN-LAST:event_newOrderButtonActionPerformed

    private void addCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerButtonActionPerformed
        String firstName = firstNameTextBox.getText();
        String lastName = lastNameTextBox.getText();
        String street = streetTextBox.getText();
        String city = cityTextBox.getText();
        String state = stateTextBox.getText();
        String zip = zipTextBox.getText();
        String phone = phoneTextBox.getText();
        String email = emailTextBox.getText();
        double creditLimite = 200;
        
        int intZip;
        int intPhone;
        
        if (containsDigits(firstName)){
            JOptionPane.showMessageDialog(this, "First name cannot containnumbers");
            return;
        }
        
        if (containsDigits(lastName)){
            JOptionPane.showMessageDialog(this, "Last name cannot containnumbers");
            return;
        }
        
        if (containsDigits(city)){
            JOptionPane.showMessageDialog(this, "City cannot containnumbers");
            return;
        }
        
        if (containsDigits(state)){
            JOptionPane.showMessageDialog(this, "State cannot containnumbers");
            return;
        }
        
        try {
           intZip = Integer.parseInt(zip);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Zip must be an integer numbers");
            return;
        }
        
        if (!isValidUSZipCode(zip)) {
            JOptionPane.showMessageDialog(this, "Invalid zip format");
            return;
        }
        
        try {
           intPhone = Integer.parseInt(zip);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "phone must be integer numbers");
            return;
        }
        
        if (!isValidPhoneNumber(phone)) {
            JOptionPane.showMessageDialog(this, "Invalid phone number format");
            return;
        }
        
        if (!isEmailFormat(email)) {
            JOptionPane.showMessageDialog(this, "Invalid email format");
            return;
        }
        
        addNewCustomer(firstName, lastName, street, city, state, zip, phone, email, creditLimite);
        JOptionPane.showMessageDialog(this, "New customer added");
        
    }//GEN-LAST:event_addCustomerButtonActionPerformed

    private void addOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOrderButtonActionPerformed
        String customerID = customerIDTextBox.getText();
        String coffeeID = coffeeIDTextBox.getText();
        String numberOrdered = numOrderedTextBox.getText();
        
        int intCustomerID = 0;
        int intCoffeeID = 0;
        int intNumberOrdered = 0;
        double doubleTotal = 0;
        
        try {
            intCustomerID = Integer.parseInt(customerID);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Customer ID cannot contain decimals or alphabets");
            return;
        }
        
        try {
            intCoffeeID = Integer.parseInt(coffeeID);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Coffee ID cannot contain decimals or alphabets");
            return;
        }
        
        try {
            intNumberOrdered = Integer.parseInt(numberOrdered);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Number of orders cannot contain decimals or alphabets");
            return;
        }
        
        try {
            doubleTotal = getCoffeePrice(intCoffeeID) * intNumberOrdered;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "SQL Error: " + ex.getMessage());
        }
        
        try {
            addNewOrder(intCustomerID, intCoffeeID, intNumberOrdered, doubleTotal);
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "SQL Error: " + ex.getMessage());
        }
        
        
    }//GEN-LAST:event_addOrderButtonActionPerformed

    public void addNewOrder(int customerId, int coffeeId, double numberOrdered, double total) throws SQLException {
        try (Connection conn = DriverManager.getConnection(dbURL, user, pass)) {
            //double total = numberOrdered * price;

            String sql = "INSERT INTO Orders (customer_id, coffee_id, number_ordered, total) VALUES (?, ?, ?, ?)";
            PreparedStatement statement = conn.prepareStatement(sql);
            statement.setInt(1, customerId);
            statement.setInt(2, coffeeId);
            statement.setDouble(3, numberOrdered);
            statement.setDouble(4, total);
            
            int stock = getCoffeeStock(conn, coffeeId);
            
            if (numberOrdered > stock) {
                JOptionPane.showMessageDialog(this, "Not enough stock");
                return;
            }

            int rowsAffected = statement.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "New order added successfully.");
                
                // Update the coffee stock
            sql = "UPDATE Coffee SET number_in_stock = number_in_stock - ? WHERE coffee_id = ?";
            statement = conn.prepareStatement(sql);
            statement.setDouble(1, numberOrdered);
            statement.setInt(2, coffeeId);
            statement.executeUpdate();
            statement.close();    
            } else {
                JOptionPane.showMessageDialog(this, "Failed to add new order.");
            }
            
            double customerCredit = getCustomerCreditLimit(conn, customerId);
            double newCreditLimit = customerCredit - total;
            
            sql = "UPDATE Customer SET credit_limit = ? WHERE customer_id = ?";
            statement = conn.prepareStatement(sql);
            statement.setDouble(1, newCreditLimit);
            statement.setInt(2, customerId);
            statement.executeUpdate();
            statement.close();

            statement.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error adding new order: " + ex.getMessage());
        }
    }
    
    private int getCoffeeStock(Connection conn, int coffeeId) throws SQLException {
        String sql = "SELECT number_in_stock FROM Coffee WHERE coffee_id = ?";
        PreparedStatement statement = conn.prepareStatement(sql);
        statement.setInt(1, coffeeId);
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
            return resultSet.getInt("number_in_stock");
        } else {
            throw new SQLException("Coffee not found with ID: " + coffeeId);
        }
    }
    
    private double getCustomerCreditLimit(Connection conn, int customerId) throws SQLException {
        String sql = "SELECT credit_limit FROM Customer WHERE customer_id = ?";
        PreparedStatement statement = conn.prepareStatement(sql);
        statement.setInt(1, customerId);
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
            return resultSet.getDouble("credit_limit");
        } else {
            throw new SQLException("Customer not found with ID: " + customerId);
        }
    }
    
    public double getCoffeePrice(int coffeeId) throws SQLException {
        String query = "SELECT price FROM Coffee WHERE coffee_id = ?";
        try (Connection conn = DriverManager.getConnection(dbURL, user, pass);
                PreparedStatement statement = conn.prepareStatement(query)) {
            statement.setInt(1, coffeeId);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getDouble("price");
            } else {
                throw new SQLException("No coffee found with ID: " + coffeeId);
            }
        }
    }
    
    public static boolean isEmailFormat(String email) {
        String pattern = "^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";
        return Pattern.compile(pattern).matcher(email).find();
    }
    
    public static boolean isValidPhoneNumber(String phoneNumber) {
        String regex = "^\\+?1?\\s*\\(?(\\d{3})\\)?[-.\\s]*?(\\d{3})[-.\\s]*?(\\d{4})$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(phoneNumber);
        return matcher.matches();
    }
    
    public static boolean isValidUSZipCode(String zipCode) {
        String regex = "^\\d{5}(?:[-\\s]\\d{4})?$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(zipCode);
        return matcher.matches();
    }
    
    public static boolean containsDigits(String input) {
        // Regex pattern to match any digit
        String regex = ".*\\d.*";
        return input.matches(regex);
    }
    
    public void addNewCustomer(String firstName, String lastName, String street, String city, String state, String zip, String phone, String email, double creditLimit) {
        try (Connection conn = DriverManager.getConnection(dbURL, user, pass)) {
            String insertSQL = "INSERT INTO Customer (first_name, last_name, street, city, state, zip, phone, email, credit_limit) " +
                               "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement statement = conn.prepareStatement(insertSQL);
            statement.setString(1, firstName);
            statement.setString(2, lastName);
            statement.setString(3, street);
            statement.setString(4, city);
            statement.setString(5, state);
            statement.setString(6, zip);
            statement.setString(7, phone);
            statement.setString(8, email);
            statement.setDouble(9, creditLimit);
            statement.executeUpdate();
            statement.close();
            conn.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error adding customer: " + ex.getMessage());
        }
    }
    
    // Method to check if a table exists
    private static boolean tableExists(Connection conn, String tableName) throws SQLException {
        DatabaseMetaData meta = conn.getMetaData();
        try (ResultSet tables = meta.getTables(null, null, tableName.toUpperCase(), null)) {
            return tables.next();
        }
    }
    
    private static void createTables(Connection conn) throws SQLException {
        createTable(conn, "Customer", 
            "customer_id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,"
            + "first_name VARCHAR(255),"
            + "last_name VARCHAR(255),"
            + "street VARCHAR(255),"
            + "city VARCHAR(255),"
            + "state VARCHAR(255),"
            + "zip VARCHAR(10),"
            + "phone VARCHAR(15),"
            + "email VARCHAR(255),"
            + "credit_limit DOUBLE");

        createTable(conn, "Coffee", 
            "coffee_id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,"
            + "coffee_name VARCHAR(255),"
            + "coffee_description VARCHAR(1000),"
            + "price DOUBLE,"
            + "number_in_stock INT");

        createTable(conn, "Orders", 
            "order_id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,"
            + "customer_id INT,"
            + "coffee_id INT,"
            + "number_ordered DOUBLE,"
            + "total DOUBLE,"
            + "FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),"
            + "FOREIGN KEY (coffee_id) REFERENCES Coffee(coffee_id)");
    }
    
    public void populateTables() throws SQLException {
        try (Connection conn = DriverManager.getConnection(dbURL, user, pass)) {
            // Insert sample data into the Customer table
            String[] customerNames = {"John Doe", "Jane Smith", "Jim Brown"};
            String[] customerAddresses = {"123 Main St", "456 Elm St", "789 Oak St"};
            String[] customerCities = {"Anytown", "Othertown", "Sometown"};
            String[] customerStates = {"CA", "NY", "TX"};
            String[] customerZips = {"12345", "67890", "11122"};
            String[] customerPhones = {"555-1234", "555-5678", "555-9012"};
            String[] customerEmails = {"john.doe@example.com", "jane.smith@example.com", "jim.brown@example.com"};
            String[] customerCreditLimits = {"200.00", "200.00", "200.00"};

            for (int i = 0; i < customerNames.length; i++) {
                String[] name = customerNames[i].split(" ");
                String firstName = name[0];
                String lastName = name[1];
                String address = customerAddresses[i];
                String city = customerCities[i];
                String state = customerStates[i];
                String zip = customerZips[i];
                String phone = customerPhones[i];
                String email = customerEmails[i];
                double creditLimit = Double.parseDouble(customerCreditLimits[i]);

                String insertCustomer = "INSERT INTO Customer (first_name, last_name, street, city, state, zip, phone, email, credit_limit) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                try (PreparedStatement statement = conn.prepareStatement(insertCustomer)) {
                    statement.setString(1, firstName);
                    statement.setString(2, lastName);
                    statement.setString(3, address);
                    statement.setString(4, city);
                    statement.setString(5, state);
                    statement.setString(6, zip);
                    statement.setString(7, phone);
                    statement.setString(8, email);
                    statement.setDouble(9, creditLimit);
                    statement.executeUpdate();
                }
            }

            // Insert sample data into the Coffee table
            String[] coffeeNames = {"Espresso", "Latte", "Cappuccino"};
            String[] coffeeDescriptions = {"Strong and bold, made from finely-ground coffee beans.",
                "A milk-based coffee drink made with espresso and steamed milk.",
                "A milk-based coffee drink made with espresso, steamed milk, and a layer of foam."};
            double[] coffeePrices = {2.50, 3.50, 4.00};
            int[] coffeeStocks = {50, 75, 100};

            for (int i = 0; i < coffeeNames.length; i++) {
                String insertCoffee = "INSERT INTO Coffee (coffee_name, coffee_description, price, number_in_stock) VALUES (?, ?, ?, ?)";
                try (PreparedStatement statement = conn.prepareStatement(insertCoffee)) {
                    statement.setString(1, coffeeNames[i]);
                    statement.setString(2, coffeeDescriptions[i]);
                    statement.setDouble(3, coffeePrices[i]);
                    statement.setInt(4, coffeeStocks[i]);
                    statement.executeUpdate();
                }
            }
        }
    }
    
    private static void createTable(Connection conn, String tableName, String columns) throws SQLException {
        String createTableSQL = "CREATE TABLE " + tableName + " (" + columns + ")";
        PreparedStatement statement = conn.prepareStatement(createTableSQL);
        statement.executeUpdate();
        statement.close();
    }
    
    private static void dropTable(Connection conn, String tableName) throws SQLException {
        String dropTableSQL = "DROP TABLE " + tableName;
        PreparedStatement statement = conn.prepareStatement(dropTableSQL);
        statement.executeUpdate();
        statement.close();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShopMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShopMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShopMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShopMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShopMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCustomerButton;
    private javax.swing.JButton addOrderButton;
    private javax.swing.JTextField cityTextBox;
    private javax.swing.JTextField coffeeIDTextBox;
    private javax.swing.JButton createDatabaseButton;
    private javax.swing.JTextField customerIDTextBox;
    private javax.swing.JButton displayCoffeeButton;
    private javax.swing.JButton displayCustomerButton;
    private javax.swing.JButton displayOrderButton;
    private javax.swing.JTable displayTable;
    private javax.swing.JButton dropDatabaseButton;
    private javax.swing.JTextField emailTextBox;
    private javax.swing.JTextField firstNameTextBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField lastNameTextBox;
    private javax.swing.JButton newCustomerButton;
    private javax.swing.JPanel newCustomerPane;
    private javax.swing.JButton newOrderButton;
    private javax.swing.JPanel newOrderPane;
    private javax.swing.JTextField numOrderedTextBox;
    private javax.swing.JTextField phoneTextBox;
    private javax.swing.JButton resetDatabaseButton;
    private javax.swing.JTextField stateTextBox;
    private javax.swing.JTextField streetTextBox;
    private javax.swing.JFrame subFrame;
    private javax.swing.JTextField zipTextBox;
    // End of variables declaration//GEN-END:variables
}
